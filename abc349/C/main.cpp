#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
using namespace std;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF 1001001001001001001ll
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}

const string YES = "Yes";
const string NO = "No";

void solve(std::string S, std::string T){
    transform(T.begin(), T.end(), T.begin(), ::tolower);

    size_t first = S.find_first_of(T[0]);

    if(first == std::string::npos){
        cout << NO << endl;
        return ;
    }

    string SS = S.substr(first+1);
    size_t second = SS.find_first_of(T[1]);

    if(second == std::string::npos){
        cout << NO << endl;
        return ;
    }

    if(T[2] == 'x'){
        cout << YES << endl;
        return ;
    }

    string SSS = SS.substr(second+1);
    size_t third = SSS.find_first_of(T[2]);

    if(third == std::string::npos){
        
        cout << NO << endl;
        return ;
    }

    cout << YES << endl; 

}

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
        std::string S;
    std::cin >> S;
    std::string T;
    std::cin >> T;
        solve(S, T);
        return 0;
}
