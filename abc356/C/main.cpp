#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
using namespace std;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF 1001001001001001001ll
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}



// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){

    int n ;
    cin >> n;
    int m ;
    cin >> m;
    int k ;
    cin >> k ;
    vector<int> c(m) ;
    vector<vector<int>> a(m,vector<int>(n, 0));
    vector<string> r(m);

    for(int i=0; i<m; i++){
        cin >> c[i];
        for(int j=0; j<c[i]; j++){
            cin >> a[i][j];
        };
        cin >> r[i];
    }


    long long Answer=0;

    for(long long i=0; i<(1ll<<n); i++){

        bool judge = true;

        for(int j= 0; j < m; j++){
            int numberOfCorrectKeys =0;

            for(int l=0; l < c[j]; l++){
                if(i&(1ll<<(a[j][l]-1))){
                    numberOfCorrectKeys += 1;
                }
            }

            if(numberOfCorrectKeys>=k){
                if(r[j]=="x"){
                    judge = false;
                }
            }else{
                if(r[j]=="o"){
                    judge = false;
                }
            }
        }
        

        if(judge){
            Answer += 1;
        }
    }

    cout << Answer << endl;


        // Failed to predict input format
        return 0;
}
