#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
using namespace std;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF 1001001001001001001ll
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}

const string YES = "Yes";
const string NO = "No";

void solve(long long x_A, long long y_A, long long x_B, long long y_B, long long x_C, long long y_C){
    if((x_B-x_A)*(x_C-x_A)+(y_B-y_A)*(y_C-y_A)==0){
        cout << YES << endl;
    }else if((x_A-x_B)*(x_C-x_B)+(y_A-y_B)*(y_C-y_B)==0){
        cout << YES << endl;
    }else if((x_A-x_C)*(x_B-x_C)+(y_A-y_C)*(y_B-y_C)==0){
        cout << YES << endl;
    }else{
        cout << NO << endl;
    }
}

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
        long long x_A;
    cin >> x_A;
    long long y_A;
    cin >> y_A;
    long long x_B;
    cin >> x_B;
    long long y_B;
    cin >> y_B;
    long long x_C;
    cin >> x_C;
    long long y_C;
    cin >> y_C;
        solve(x_A, y_A, x_B, y_B, x_C, y_C);
        return 0;
}
