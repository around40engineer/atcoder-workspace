#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
#include <numeric>
using namespace std;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF 1001001001001001001ll
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}

bool question(int N, long long M, vector<int> A, int m){
    long long sum=0;
        
        for(int i=0; i<N; i++){
            sum += min(m,A[i]);
        }

        return M>=sum;
}

int binarySearch(int N, long long M, vector<int> A){
    int ok =M/N;
    int ng =*max_element(A.begin(),A.end());
    // int ng = M; 

    while(ng - ok>1){
        int m =(ng+ok)/2;
        if(question(N,M,A,m)) ok=m;
        else ng=m;
    }
    return ok;
}



// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
        
        int N;
        cin>>N;
        long long M;
        cin>>M;

        vector<int> A(N);

        for(int i=0; i<N; i++){
            cin>>A[i];
        };

        // sort(A.begin(), A.end(), [](int a, int b) {return a > b;});

        // long long sum=0;
        
        // for(int i=0; i<N; i++){
        //     sum += A[i];
        // }

        // long long s=0;
        // s = M - sum;
        // if(s>=0){
        //     cout<<"infinite"<<endl;
        //     return 0;
        // }else{
        //     for(int i=1; i<N; i++){
        //         s += i*(A[i-1]-A[i]);
        //         if(s==0){
        //             cout<< A[i] << endl;
        //             return 0;
        //         }else if(s>0){
        //             cout<< A[i] + s/i << endl;
        //             return 0;
        //         };
        //     }
        //     cout << M/N <<endl;
        //     return 0;
        // }

        long long sum=0;
        
        for(int i=0; i<N; i++){
            sum += A[i];
        }

        long long s=0;
        s = M - sum;
        if(s>=0){
            cout<<"infinite"<<endl;
            return 0;
        }else if(s>=(*min_element(A.begin(),A.end()))*N){
            cout<<M/N<<endl;
        }else{
            cout<<binarySearch(N,M,A)<<endl;
        }

}
