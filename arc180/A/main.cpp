#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
using namespace std;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF 1001001001001001001ll
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}

const long long MOD = 1000000007;

void solve(long long N, std::string S){

    vector<long long> dpA(N + 1);  // dpA[i]: Sの先頭からi文字目までの部分文字列で、操作後に得られる文字列の個数（最後がAで終わるもの）
    vector<long long> dpB(N + 1);  // dpB[i]: Sの先頭からi文字目までの部分文字列で、操作後に得られる文字列の個数（最後がBで終わるもの）

    dpA[0] = 1;
    dpB[0] = 1;

    for (long long i = 1; i <= N; ++i) {
            if (S[i - 1] == 'A') {
                dpA[i] = (dpA[i - 1] + dpB[i - 1]) % MOD;  // ABAをAに置換する操作を考慮
                dpB[i] = dpB[i - 1];  // BABをBに置換する操作は影響しない
            } else { // S[i - 1] == 'B'
                dpA[i] = dpA[i - 1];  // ABAをAに置換する操作は影響しない
                dpB[i] = (dpB[i - 1] + dpA[i - 1]) % MOD;  // BABをBに置換する操作を考慮
            }
        }

    cout << (dpA[N] + dpB[N]) % MOD;

}

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    //     long long N;
    // cin >> N;
    // std::string S;
    // std::cin >> S;
    //     solve(N, S);
    //     return 0;

    int N;
    string S;
    cin >> N >> S;

    // dpA[i]: Number of ways to form length (i+1) ending with 'A'
    // dpB[i]: Number of ways to form length (i+1) ending with 'B'
    vector<long long> dpA(N + 1, 0);
    vector<long long> dpB(N + 1, 0);

    // Base case
    dpA[0] = 1; // Empty string
    dpB[0] = 1; // Empty string

    for (int i = 0; i < N; ++i) {
        if (S[i] == 'A') {
            dpA[i + 1] = (dpA[i] + dpB[i]) % MOD; // ABA -> A
            dpB[i + 1] = dpB[i]; // No BAB -> B
        } else { // S[i] == 'B'
            dpB[i + 1] = (dpB[i] + dpA[i]) % MOD; // BAB -> B
            dpA[i + 1] = dpA[i]; // No ABA -> A
        }
    }

    // Total number of possible strings
    long long total = (dpA[N] + dpB[N]) % MOD;
    cout << total << endl;

    return 0;
}



