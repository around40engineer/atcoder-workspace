#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
using namespace std;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF 1001001001001001001ll
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}


void solve(long long N, long long K, vector<long long> P){
    vector<pair<long long , long long>> operations;
    long long max_operations = 0;

    for(long long i=0; i<N; i++){
        for(long long j=K; j<N; j++){
           if(P[i]>P[i+K]){
            int temp=0;
            temp = P[i];
            P[i] = P[i+j];
            P[i+j] = temp;
            operations.push_back({i, i+j});
            max_operations++;
           }
        }
    }
}

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    //     long long N;
    // // std::scanf("%lld", &N);
    // cin >> N;
    // long long K;
    // // std::scanf("%lld", &K);
    // cin >> K;
    // std::vector<long long> P(N);
    // for(int i = 0 ; i < N ; i++){
    //     // std::scanf("%lld", &P[i]);
    //     cin >> P[i];
    // }
    //     solve(N, K, P);
    //     return 0;
    int N, K;
    cin >> N >> K;

    vector<int> P(N + 1);
    for (int i = 1; i <= N; ++i) {
        cin >> P[i];
    }

    vector<pair<int, int>> operations;
    set<pair<int, int>> used_operations;

    int max_operations = 0;

    // Start from the end and try to swap until K conditions are met
    for (int i = N; i >= 2 && max_operations < K; --i) {
        for (int j = i - 1; j >= 1 && max_operations < K; --j) {
            if (P[j] > P[i]) {
                // Check if this operation has been used before
                if (used_operations.find({j, i}) == used_operations.end()) {
                    swap(P[j], P[i]);
                    operations.push_back({j, i});
                    used_operations.insert({j, i});
                    max_operations++;
                }
            }
        }
    }

    cout << operations.size() << endl;
    for (auto op : operations) {
        cout << op.first << " " << op.second << endl;
    }

    return 0;
}
